[{"C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\index.tsx":"1","C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\reportWebVitals.ts":"2","C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\App.tsx":"3","C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Navbar\\Navbar.tsx":"4","C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Auth\\Auth.tsx":"5","C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Powers\\Powers.tsx":"6","C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Powers\\DisplayPower\\DisplayPower.tsx":"7","C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Characters\\Characters.tsx":"8","C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Characters\\DisplayCharacter\\DisplayCharacter.tsx":"9","C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Profile\\Profile.tsx":"10","C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Profile\\ProfileDisplay\\ProfileDisplay.tsx":"11","C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Profile\\CreateUpdateDelete\\CreatePower.tsx":"12","C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Profile\\CreateUpdateDelete\\UpdatePower.tsx":"13","C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Profile\\CreateUpdateDelete\\CreateCharacter.tsx":"14","C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Profile\\CreateUpdateDelete\\UpdateCharacter.tsx":"15","C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\helpers\\enviorment.tsx":"16"},{"size":500,"mtime":499162500000,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":1233,"mtime":1610563537054,"results":"20","hashOfConfig":"18"},{"size":2698,"mtime":1610648799870,"results":"21","hashOfConfig":"18"},{"size":6123,"mtime":1610656493523,"results":"22","hashOfConfig":"18"},{"size":1861,"mtime":1610654474581,"results":"23","hashOfConfig":"18"},{"size":4701,"mtime":1610648799871,"results":"24","hashOfConfig":"18"},{"size":2031,"mtime":1610654131057,"results":"25","hashOfConfig":"18"},{"size":4972,"mtime":1610648799869,"results":"26","hashOfConfig":"18"},{"size":3701,"mtime":1610655482018,"results":"27","hashOfConfig":"18"},{"size":5565,"mtime":1610655049109,"results":"28","hashOfConfig":"18"},{"size":3294,"mtime":1610651035346,"results":"29","hashOfConfig":"18"},{"size":3055,"mtime":1610648799875,"results":"30","hashOfConfig":"18"},{"size":3307,"mtime":1610648799873,"results":"31","hashOfConfig":"18"},{"size":3477,"mtime":1610648799875,"results":"32","hashOfConfig":"18"},{"size":396,"mtime":1610655063485,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"abbh69",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\index.tsx",[],["69","70"],"C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\reportWebVitals.ts",[],"C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\App.tsx",[],"C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Navbar\\Navbar.tsx",[],"C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Auth\\Auth.tsx",["71"],"C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Powers\\Powers.tsx",[],"C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Powers\\DisplayPower\\DisplayPower.tsx",[],"C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Characters\\Characters.tsx",[],"C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Characters\\DisplayCharacter\\DisplayCharacter.tsx",["72","73"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Button, Dialog } from '@material-ui/core/';\r\nimport UpdateCharacter from '../../Profile/CreateUpdateDelete/UpdateCharacter'\r\nimport UpdatePower from '../../Profile/CreateUpdateDelete/UpdatePower';\r\n\r\n//STYLES\r\nconst useStyles = makeStyles({\r\n    divContain: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    root: {\r\n        minWidth: 475,\r\n        maxWidth: 476,\r\n        border: '2px solid black',\r\n        marginTop: '10px',\r\n        marginBottom: '20px'\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    }\r\n});\r\n\r\n//PROPS AND TYPEALIAS\r\ntype characterInterface = {\r\n    characterName: string,\r\n    tags: Array<string>,\r\n    description: string,\r\n    user: { userName: string, role: string },\r\n    id: number\r\n    updatedAt: Date\r\n}\r\n\r\ntype characterProps = {\r\n    characterResults: Array<characterInterface>,\r\n    deleteCharacter(id: number): void,\r\n    userRole: string | null,\r\n    token: string | null\r\n}\r\n\r\ntype modalType = {\r\n    modalOpen: boolean\r\n}\r\n\r\ntype modalProps = {\r\n    id: number,\r\n    deleteCharacter(id: number): void\r\n}\r\n\r\nclass Modal extends React.Component<modalProps, modalType> {\r\n    constructor(props: modalProps) {\r\n        super(props)\r\n        this.state = {\r\n            modalOpen: false\r\n        }\r\n    }\r\n\r\n    handleOpen() {\r\n        this.setState({ modalOpen: true })\r\n    }\r\n\r\n    handleClose() {\r\n        this.setState({ modalOpen: false })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button style={{border: '1px solid black'}} onClick={() => this.handleOpen()} >Delete Character</Button>\r\n                <Dialog\r\n                    open={this.state.modalOpen}\r\n                    onClose={() => this.handleClose()}\r\n                >\r\n                    <div style={{ padding: '10px' }}>\r\n                        <h2>Are You Sure?</h2>\r\n                        <br />\r\n                        <Button style={{border: '1px solid black'}} onClick={() => this.props.deleteCharacter(this.props.id)}>Delete</Button>\r\n                    </div>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst DisplayCharacter = (props: characterProps) => {\r\n    const classes = useStyles()\r\n\r\n    let sortedCharacters = props.characterResults.sort((n1,n2) => {\r\n        if(n1.updatedAt < n2.updatedAt) {\r\n            return 1;\r\n        }\r\n\r\n        if(n1.updatedAt > n2.updatedAt) {\r\n            return -1;\r\n        }\r\n\r\n        return 0;\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {props.characterResults.map((character: characterInterface, index: number) => {\r\n\r\n                    let isHidden\r\n\r\n                    if (props.userRole !== 'admin') {\r\n                        isHidden = true\r\n                    }\r\n\r\n\r\n                    return (\r\n                        <div className={classes.divContain} key={index}>\r\n                            <Card className={classes.root}>\r\n                                <CardContent>\r\n                                    <Typography className={classes.title} color=\"textPrimary\" gutterBottom>\r\n                                        Character:\r\n                                </Typography>\r\n                                    <Typography variant=\"h5\" component=\"h2\">\r\n                                        {character.characterName}\r\n                                    </Typography>\r\n                                    <Typography className={classes.pos} color=\"textSecondary\">\r\n                                        {character.description}\r\n                                    </Typography>\r\n                                    <Typography variant=\"body2\" component=\"p\">\r\n                                        {character.user.userName}\r\n                                    </Typography>\r\n                                    <div className=\"modalDiv\" hidden={isHidden}>\r\n                                        <UpdateCharacter\r\n                                            token={props.token}\r\n                                            id={character.id}\r\n                                        />\r\n                                        <Modal\r\n                                            id={character.id}\r\n                                            deleteCharacter={props.deleteCharacter}\r\n\r\n                                        >\r\n                                        </Modal>\r\n                                    </div>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DisplayCharacter","C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Profile\\Profile.tsx",[],"C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Profile\\ProfileDisplay\\ProfileDisplay.tsx",["74","75","76"],"import React from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport UpdatePower from '../CreateUpdateDelete/UpdatePower';\r\nimport UpdateCharacter from '../CreateUpdateDelete/UpdateCharacter'\r\n\r\n//styles\r\nconst useStyles = makeStyles({\r\n    divContain: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    root: {\r\n        minWidth: 475,\r\n        maxWidth: 476,\r\n        border: '2px solid black',\r\n        marginTop: '10px',\r\n        marginBottom: '20px'\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    }\r\n});\r\n\r\n//power, character, props interfaces\r\ntype powerInterface = {\r\n    powerName: string,\r\n    description: string,\r\n    id: number\r\n    updatedAt: Date\r\n}\r\n\r\ntype characterInterface = {\r\n    characterName: string,\r\n    tags: Array<string>,\r\n    description: string,\r\n    id: number\r\n    updatedAt: Date\r\n}\r\n\r\ntype PropsInterface = {\r\n    user: {userName: string}\r\n    userPowers: Array<powerInterface>,\r\n    userCharacters: Array<characterInterface>,\r\n    viewConductor: number,\r\n    deletePower(id: number, token: string | null): void,\r\n    deleteCharacter(id: number, token: string | null): void,\r\n    token: string | null\r\n}\r\n\r\n// FUNCTIONAL COMPONENT\r\n\r\nconst ProfileDisplay = (props: PropsInterface) => {\r\n    const classes = useStyles();\r\n\r\n    let sortedPowers = props.userPowers.sort((n1, n2) => {\r\n        if(n1.updatedAt < n2.updatedAt){\r\n            return 1;\r\n        }\r\n\r\n        if(n1.updatedAt > n2.updatedAt){\r\n            return -1;\r\n        }\r\n\r\n        return 0;\r\n    }) \r\n\r\n    let sortedCharacters = props.userCharacters.sort((n1,n2) => {\r\n        if(n1.updatedAt < n2.updatedAt) {\r\n            return 1;\r\n        }\r\n\r\n        if(n1.updatedAt > n2.updatedAt) {\r\n            return -1;\r\n        }\r\n\r\n        return 0;\r\n    })\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"powerMap\">\r\n                {sortedPowers.length > 0 && sortedPowers.map((power: powerInterface, index: number) => {\r\n                    if(props.viewConductor === 0) {\r\n                    return(\r\n                        <div className={classes.divContain} key={index}>\r\n                            <Card className={classes.root}>\r\n                                <CardContent>\r\n                                    <Typography className={classes.title} color=\"textPrimary\" gutterBottom>\r\n                                        Power:\r\n                                    </Typography>\r\n                                    <Typography variant=\"h5\" component=\"h2\">\r\n                                        {power.powerName}\r\n                                    </Typography>\r\n                                    <Typography className={classes.pos} color=\"textSecondary\">\r\n                                        {power.description}\r\n                                    </Typography>\r\n                                    <Typography variant=\"body2\" component=\"p\">\r\n                                        {props.user.userName}\r\n                                    </Typography>\r\n                                    <UpdatePower token={props.token} id={power.id}/>\r\n                                    <Button style={{border: '1px solid black'}} type=\"submit\" onClick={() => props.deletePower(power.id, props.token)}>DELETE</Button>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </div>\r\n                    )}\r\n                })}\r\n            </div>\r\n            <div className=\"characterMap\">\r\n                {sortedCharacters.length > 0 && sortedCharacters.map((character: characterInterface, index: number) => {\r\n                    if(props.viewConductor === 1) { \r\n                    return(\r\n                        <div className={classes.divContain} key={index}>\r\n                            <Card className={classes.root}>\r\n                                <CardContent>\r\n                                    <Typography className={classes.title} color=\"textPrimary\" gutterBottom>\r\n                                        Character:\r\n                                    </Typography>\r\n                                    <Typography variant=\"h5\" component=\"h2\">\r\n                                        {character.characterName}\r\n                                    </Typography>\r\n                                    <Typography className={classes.pos} color=\"textSecondary\">\r\n                                        {character.description}\r\n                                    </Typography>\r\n                                    <Typography variant=\"body2\" component=\"p\">\r\n                                        {props.user.userName}\r\n                                    </Typography>\r\n                                    <UpdateCharacter token={props.token} id={character.id}/>\r\n                                    <Button style={{border: '1px solid black'}} type=\"submit\" onClick={() => props.deleteCharacter(character.id, props.token)}>DELETE</Button>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </div>\r\n                    )}\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileDisplay","C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Profile\\CreateUpdateDelete\\CreatePower.tsx",[],"C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Profile\\CreateUpdateDelete\\UpdatePower.tsx",[],"C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Profile\\CreateUpdateDelete\\CreateCharacter.tsx",[],"C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\components\\Profile\\CreateUpdateDelete\\UpdateCharacter.tsx",[],"C:\\Users\\kigog\\Desktop\\WDOctober2020\\Projects\\redBadgeThePowerBoard\\power-board-client\\src\\helpers\\enviorment.tsx",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":5,"column":10,"nodeType":"83","messageId":"84","endLine":5,"endColumn":15},{"ruleId":"81","severity":1,"message":"85","line":8,"column":8,"nodeType":"83","messageId":"84","endLine":8,"endColumn":19},{"ruleId":"81","severity":1,"message":"86","line":95,"column":9,"nodeType":"83","messageId":"84","endLine":95,"endColumn":25},{"ruleId":"81","severity":1,"message":"87","line":5,"column":8,"nodeType":"83","messageId":"84","endLine":5,"endColumn":19},{"ruleId":"88","severity":1,"message":"89","line":91,"column":101,"nodeType":"90","messageId":"91","endLine":91,"endColumn":103},{"ruleId":"88","severity":1,"message":"89","line":118,"column":117,"nodeType":"90","messageId":"91","endLine":118,"endColumn":119},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"@typescript-eslint/no-unused-vars","'Alert' is defined but never used.","Identifier","unusedVar","'UpdatePower' is defined but never used.","'sortedCharacters' is assigned a value but never used.","'CardActions' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]